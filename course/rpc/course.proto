syntax = "proto3";

package course;

// protoc-gen-go 版本大于1.4.0, proto文件需要加上go_package,否则无法生成
option go_package = "./course";

message BaseResp {
  int32 status_code = 1;
  string status_message = 2;
  int64 service_time = 3;
}

message Course {
  int32 id = 1;
  string name = 2;
  string avatar = 3;
  int32 hours = 4;
  int32 sid = 5;
}

message CreateCourseRequest {
  string name = 1;
  string avatar = 2;
  int32 hours = 3;
  int32 sid = 4;
}

message CreateCourseResponse {
  BaseResp base_resp = 1;
}

message DeleteCourseRequest {
  int32 id = 1;
}

message DeleteCourseResponse {
  BaseResp base_resp = 1;
}

message UpdateCourseRequest {
  int32 id = 1;
  string name = 2;
  string avatar = 3;
  int32 hours = 4;
  int32 sid = 5;
}

message UpdateCourseResponse {
  BaseResp base_resp = 1;
}



message MGetCourseRequest {
  // repeated 表示可以有多个
  repeated int32 course_ids = 1;
}

message MGetCourseResponse {
  repeated Course courses = 1;
  BaseResp base_resp = 2;
}

message CheckCourseRequest{
  string name = 1;
}

message CheckCourseResponse{
  BaseResp base_resp = 1;
}

message QueryCourseBySidRequest{
  int32 sid = 1; // <0 表示全部
  int32 limit = 2;
  int32 offset = 3;
}

message QueryCourseBySidResponse{
  repeated Course courses = 1;
  int32 total = 2;
  BaseResp base_resp = 3;
}





service CourseService {
  // 创建课程
  rpc CreateCourse (CreateCourseRequest) returns (CreateCourseResponse) {}
  // 删除课程
  rpc DeleteCourse (DeleteCourseRequest) returns (DeleteCourseResponse) {}
  // 更新课程
  rpc UpdateCourse (UpdateCourseRequest) returns (UpdateCourseResponse) {}
  // 获取课程
  rpc MGetCourse(MGetCourseRequest) returns (MGetCourseResponse) {}
  // 检查课程名称是否重复
  rpc CheckCourse(CheckCourseRequest) returns (CheckCourseResponse) {}
  // 根据sid获取课程,如果sid <= 0,则获取全部
  rpc QueryCourseBySid(QueryCourseBySidRequest) returns (QueryCourseBySidResponse) {}
}
