// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package school

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolServiceClient interface {
	MGetSchool(ctx context.Context, in *MGetSchoolRequest, opts ...grpc.CallOption) (*MGetSchoolResponse, error)
	QueryIdByName(ctx context.Context, in *QueryIdByNameRequest, opts ...grpc.CallOption) (*QueryIdByNameResponse, error)
}

type schoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolServiceClient(cc grpc.ClientConnInterface) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) MGetSchool(ctx context.Context, in *MGetSchoolRequest, opts ...grpc.CallOption) (*MGetSchoolResponse, error) {
	out := new(MGetSchoolResponse)
	err := c.cc.Invoke(ctx, "/school.SchoolService/MGetSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) QueryIdByName(ctx context.Context, in *QueryIdByNameRequest, opts ...grpc.CallOption) (*QueryIdByNameResponse, error) {
	out := new(QueryIdByNameResponse)
	err := c.cc.Invoke(ctx, "/school.SchoolService/QueryIdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
// All implementations must embed UnimplementedSchoolServiceServer
// for forward compatibility
type SchoolServiceServer interface {
	MGetSchool(context.Context, *MGetSchoolRequest) (*MGetSchoolResponse, error)
	QueryIdByName(context.Context, *QueryIdByNameRequest) (*QueryIdByNameResponse, error)
	mustEmbedUnimplementedSchoolServiceServer()
}

// UnimplementedSchoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchoolServiceServer struct {
}

func (UnimplementedSchoolServiceServer) MGetSchool(context.Context, *MGetSchoolRequest) (*MGetSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetSchool not implemented")
}
func (UnimplementedSchoolServiceServer) QueryIdByName(context.Context, *QueryIdByNameRequest) (*QueryIdByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIdByName not implemented")
}
func (UnimplementedSchoolServiceServer) mustEmbedUnimplementedSchoolServiceServer() {}

// UnsafeSchoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServiceServer will
// result in compilation errors.
type UnsafeSchoolServiceServer interface {
	mustEmbedUnimplementedSchoolServiceServer()
}

func RegisterSchoolServiceServer(s grpc.ServiceRegistrar, srv SchoolServiceServer) {
	s.RegisterService(&SchoolService_ServiceDesc, srv)
}

func _SchoolService_MGetSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).MGetSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/school.SchoolService/MGetSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).MGetSchool(ctx, req.(*MGetSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_QueryIdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).QueryIdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/school.SchoolService/QueryIdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).QueryIdByName(ctx, req.(*QueryIdByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolService_ServiceDesc is the grpc.ServiceDesc for SchoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "school.SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MGetSchool",
			Handler:    _SchoolService_MGetSchool_Handler,
		},
		{
			MethodName: "QueryIdByName",
			Handler:    _SchoolService_QueryIdByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school.proto",
}
